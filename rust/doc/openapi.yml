openapi: "3.0.3"
info:
  title: "Scanner"
  description: "Control vulnerability scans for OpenVAS and Notus scanner."
  contact:
    name: "Greenbone AG"
    url: "https://www.greenbone.net/"
  license:
    name: "GPL-2.0-or-later"
    url: "https://spdx.org/licenses/GPL-2.0-or-later.html"
  version: "1.0"
servers:
  - url: /
tags:
  - name: general
    description: General requests
  - name: scan
    description: Scan resource
  - name: feed
    description: Feed related
paths:
  /:
    head:
      description: "Get the response header. It contains the API version, feed version and authentication methods available."
      operationId: "get_info"
      tags:
        - "general"
      responses:
        "200":
          description: "Header"

  /scan:
    post:
      description: "Add a new scan to the scan manager."
      operationId: "create_scan"
      tags:
        - "scan"
      requestBody:
        description: "Scan to add"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Scan"
      responses:
        "201":
          description: "Scan created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScanID"
        "400":
          description: "Bad Request body"

  /scan/{id}:
    get:
      description: "Get a scan from the scan manager."
      operationId: "get_scan"
      tags:
        - "scan"
      parameters:
        - $ref: "#/components/parameters/ID"
      responses:
        "200":
          description: "Get Scan"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Scan"
        "404":
          description: "Scan not found"

    post:
      description: "Perform an action to a scan."
      operationId: "scan_action"
      tags:
        - "scan"
      parameters:
        - $ref: "#/components/parameters/ID"
      requestBody:
        description: "Action to perform."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScanAction"
      responses:
        "200":
          description: "Action performed"
        "400":
          description: "Bad request body"
        "404":
          description: "Scan not found"

    delete:
      description: "Delete a scan from the scan manager."
      operationId: "delete_scan"
      tags:
        - "scan"
      parameters:
        - $ref: "#/components/parameters/ID"
      responses:
        "200":
          description: "Scan deleted"
        "404":
          description: "Scan not found"
        "406":
          description: "A running scan cannot be deleted"

  /scan/{id}/result:
    get:
      description: "Get results from a scan."
      operationId: "get_results"
      tags:
        - "scan"
        - "result"
      parameters:
        - $ref: "#/components/parameters/ID"
        - name: range
          in: query
          description: "Get a specific range of results (both numbers are implicit). In case only a single number is given, all results from this to the last one are returned."
          required: false
          schema:
            type: "string"
      responses:
        "200":
          description: "A list of results"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Result"
        "400":
          description: "Bad range format"
        "404":
          description: "Scan not found"
        "406":
          description: "A scan, that has not started, does not contain results"

  /scan/{id}/result/{num}:
    get:
      description: "Get a specific result from the scan."
      operationId: "get_result"
      tags:
        - "scan"
        - "result"
      parameters:
        - $ref: "#/components/parameters/ID"
        - name: num
          in: path
          description: "ID of the result"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "The requested result"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Result"
        "404":
          description: "Result or Scan not found"
        "406":
          description: "A scan that has not started, cannot contain results"

  /scan/{id}/status:
    get:
      description: "Get the current status of a scan."
      operationId: "get_scan_status"
      tags:
        - "scan"
      parameters:
        - $ref: "#/components/parameters/ID"
      responses:
        "200":
          description: "The requested status"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
        "404":
          description: "Scan not found"

  /vt:
    get:
      description: "Get a list of all available VTs (OIDs)."
      operationId: "get_vts"
      tags:
        - "feed"
      responses:
        "200":
          description: "A list of available VTs."
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "string"
        "503":
          description: "The list of OIDs is currently updated. Please try again later."

components:
  parameters:
    ID:
      name: id
      in: path
      description: "An ID"
      required: true
      schema:
        $ref: "#/components/schemas/ScanID"

  schemas:
    ScanID:
      description: "A scan ID to identify a scan."
      type: "string"

    Scan:
      description: "An abstraction for starting a scan."
      type: "object"
      properties:
        scan_id:
          description: "The scan ID for a scan to create. If left empty, an ID is automatically generated. Must be a UUIDv4."
          $ref: "#/components/schemas/ScanID"
        target:
          description: "The target to scan"
          $ref: "#/components/schemas/Target"
        scanner_parameters:
          description: "Overwrite the default settings of the Scanner."
          type: "array"
          items:
            $ref: "#/components/schemas/Parameter"
        vts:
          type: "array"
          description: "A collection of VTs, which are run for the given target."
          items:
            $ref: "#/components/schemas/VT"
      required:
        - target
        - vts

    Target:
      description: "A target is a list of hosts to scan, including their UDP and TCP ports. Additionally for further access to the systems credentials can be given."
      type: "object"
      properties:
        hosts:
          description: "A list of hosts."
          type: "array"
          items:
            description: "Contains either an IPv4, IPv6, IPv4 range, IPv6 range, IPv4 CIDR, IPv6 CIDR or hostname."
            type: "string"
        ports:
          description: "A list of ports."
          type: "array"
          items:
            $ref: "#/components/schemas/PortRange"
        credentials:
          description: "A list of credentials used for further access to a target system."
          type: "array"
          items:
            $ref: "#/components/schemas/Credential"
        alive_test_ports:
          description: "Dedicated port list for alive detection. Used for TCP-SYN and TCP-ACK ping when Boreas is enabled."
          type: "array"
          items:
            $ref: "#/components/schemas/PortRange"
        alive_test_methods:
          description: "List of alive test to be performed against the target. Can be one or a combination of icmp, tcp_syn, tcp_ack, arp, consider_alive methods"
          type: "array"
          items:
            $ref: "#/components/schemas/AliveTestMethod"
        reverse_lookup_unify:
          description: "If multiple IP addresses resolve to the same DNS name the DNS name will only get scanned once."
          type: "boolean"
        reverse_lookup_only:
          description: "Only scan IP addresses that can be resolved into a DNS name."
          type: "boolean"
      required:
        - hosts
        - ports

    AliveTestMethod:
      description: "Alive test method to be performed against the target"
      type: "string"
      enum:
        - icmp
        - tcp_syn
        - tcp_ack
        - arp
        - consider_alive

    PortRange:
      description: "A port range for either UDP or TCP ports"
      type: "object"
      properties:
        protocol:
          description: "The protocol for the port range. If missing the port range is applied for UDP and TCP."
          type: "string"
          enum:
            - udp
            - tcp
        range:
          description: "A comma separated list of port options. A port option is either a single port or a port range given with two numbers with a hyphen."
          type: "string"
      required:
        - range

    Credential:
      description: "Data for authentication for a target system."
      type: "object"
      properties:
        service:
          description: "The service used for authentication."
          type: "string"
          enum:
            - ssh
            - smb
            - esxi
            - snmp
        port:
          description: "The port the authentication service is running."
          type: "integer"
          format: "int32"
        up:
          $ref: "#/components/schemas/UP"
        usk:
          $ref: "#/components/schemas/USK"
        snmp:
          $ref: "#/components/schemas/SNMP"

    UP:
      description: "Authentication via Username and Password."
      type: "object"
      properties:
        username:
          description: "Username for authentication."
          type: "string"
        password:
          description: "Password for authentication."
      required:
        - username

    USK:
      description: "Authentication via Username and Security Key."
      type: "object"
      properties:
        username:
          description: "Username for authentication."
          type: "string"
        password:
          description: "Password for Security Key."
          type: "string"
        private:
          description: "SSH private key."
          type: "string"
      required:
        - username
        - private

    SNMP:
      description: "Authentication via SNMP."
      type: "object"
      properties:
        username:
          description: "Username for SNMP authentication."
          type: "string"
        password:
          description: "Password for SNMP authentication."
          type: "string"
        community:
          description: "Community string for SNMP authentication."
          type: "string"
        auth_algorithm:
          description: "Algorithm for SNMP authentication."
          type: "string"
          enum:
            - md5
            - sha1
        privacy_password:
          description: "Privacy Password for SNMP authentication."
          type: "string"
        privacy_algorithm:
          description: "Algorithm used for encrypting privacy password."
          type: "string"
          enum:
            - aes
            - des

    Parameter:
      description: "Consists of a parameter ID and its value."
      type: "object"
      properties:
        id:
          description: "ID of the parameter to set."
          type: "integer"
          format: "int32"
        value:
          description: "Value of the parameter."
          type: "string"
      required:
        - value
        - id

    VT:
      description: "A single VT and its parameters."
      type: "object"
      properties:
        oid:
          description: "The identifier for a VT"
          type: "string"
        parameters:
          description: "A list of parameters for the VT"
          type: "array"
          items:
            $ref: "#/components/schemas/Parameter"

    Result:
      description: "A result of a Scan"
      type: "object"
      properties:
        id:
          description: "An ID, which is unique for the scan. It is auto incremental and starts at 0 for the first result."
          type: "integer"
          format: "int32"
        result_type:
          description: "The type of the result."
          type: "string"
        ip_address:
          description: "The IP of the target the result was found."
          type: "string"
        hostname:
          description: "The hostname of the target the result was found."
          type: "string"
        oid:
          description: "The identifier of the VT in which found the result."
          type: "string"
        port:
          description: "The port that was used to find the result."
          type: "integer"
          format: "int32"
        protocol:
          description: "The protocol that was used to find the result, corresponding to the port."
          type: "string"
          enum:
            - udp
            - tcp
        uri:
          description: "A location, where the vulnerability was detected."
          type: "string"
        message:
          description: "Additional information about the result."
          type: "string"
      required:
        - name
        - result_type
        - ip_address
        - description

    Status:
      description: "The status of a scan"
      type: "object"
      properties:
        start_time:
          description: "A UNIX time format describing when the scan started."
          type: "integer"
          format: "int32"
        end_time:
          description: "A UNIX time format describing when the scan ended."
          type: "integer"
          format: "int32"
        status:
          description: "In which phase the scan is currently in."
          type: "string"
          enum:
            - requested
            - running
            - stopped
            - failed
            - succeeded
        #     total_vts:
        #       description: "The number of selected VTs for this scan."
        #       type: "integer"
        #       format: "int32"
        host_info:
          $ref: "#/components/schemas/HostInfo"
      required:
        - status
        - total_vts

    HostInfo:
      description: "Information about the progress for each host of the scan."
      type: "object"
      properties:
        all:
          description: "The number of host in the target of the scan."
          type: "integer"
          format: "int32"
        excluded:
          description: "The number of hosts excluded from the scan."
          type: "integer"
          format: "int32"
        dead:
          description: "The number of host detected as not reachable."
          type: "integer"
          format: "int32"
        alive:
          description: "The number of hosts that are reachable and will be scanned."
          type: "integer"
          format: "int32"
        queued:
          description: "The number of hosts that are waiting to be scanned."
          type: "integer"
          format: "int32"
        finished:
          description: "The number hosts that are finished with scanning."
          type: "integer"
          format: "int32"
        scanning:
          description: "The IPs of the currently scanned hosts."
          type: "array"
          items:
            type: "string"

      required:
        - all
        - excluded
        - dead
        - alive
        - queued
        - finished
        - scanning

    Reference:
      description: "A reference for a VT."
      type: "object"
      properties:
        ref_type:
          description: "Type of a reference."
          type: "string"
        value:
          description: "Value of a reference."
          type: "string"
      required:
        - ref_type
        - value

    Severity:
      description: "A severity."
      type: "object"
      properties:
        version:
          description: "The version of the severity."
          type: "string"
          enum:
            - cvss_base_v2
            - cvss_base_v3
        vector:
          description: "The severity vector."
          type: "string"
        date:
          description: "A UNIX format timestamp."
          type: "integer"
          format: "int32"
      required:
        - version
        - vector
        - date

    ScanAction:
      description: "An action to perform on a scan"
      type: "object"
      properties:
        action:
          description: "The action to perform"
          type: "string"
          enum:
            - start
            - stop
      required:
        - "action"

externalDocs:
  description: "Additional information about authentication and response header."
  url: "https://github.com/greenbone/openvas-scanner/blob/main/rust/doc/api.md"
